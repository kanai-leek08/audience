<!DOCTYPE html>
<html>
  <head>
    <script src="https://unpkg.com/react@15/dist/react.min.js"></script>
    <script src="https://unpkg.com/react-dom@15/dist/react-dom.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.34/browser.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <style>
      body {
        color: gray;
      }
      .personInput {
        margin-left: 5px;
      }
      .person{
        width: 200px;
        display: inline-block;
        border: solid 1px gray;
        margin: 10px;
      }
      .personWow{
        margin: 0px;
        margin-top: 6px;
        border-top: 1px gray dashed;
        text-align: center;
      }
      .personName{
        text-align: right;
        padding-right: 15px;
        font-size: 12px;
      }
      .personName span{
      }
      .personWow .count{
        font-size: 40px;
        color: green;
      }
      .personWowBtn{
        top: 0px;
        background: #008000;
        border: none;
        margin: 0px;
        color: white;
        margin-left: 5px;
      }
      .personDelete{
        position: relative;
        margin: 0px;
        margin-left: 10px;
      }
      .popup{
        display:none;
        font-size: 50px;
        position: absolute;
        top: 0px;
        left: 0px;
        background: rgba(0,0,0,0.4);
        color: white;
        border-radius: 50px;
        padding: 13px;
      }
    </style>
  </head>
  <body>
    <div id="app"></div>
    <script type="text/babel">
     var Root = React.createClass({
       getInitialState: function () {
         var react = this;
         App.room = App.cable.subscriptions.create("RoomChannel", {
           connected: function() {},
           disconnected: function() {},
           received: function(data) {
             react.setAllPersons();
             if (data.message.match(/wow/)) {
               var top = Math.floor(Math.random() * ($(window).height() - 0) + 0);
               var left = Math.floor(Math.random() * ($(window).width() - 0) + 0);
               var popupClass = 'popup-' + top;
               var $elem = $("<div class='popup " + popupClass + "'>へぇ</div>");
               $elem.css('top', top);
               $elem.css('left', left);
               $('body').append($elem);
               $('.' + popupClass).fadeIn(300);
               setTimeout(function(){
                 $('.' + popupClass).fadeOut(300, function(){
                   $($elem).remove();
                 });
               }, 1000);
             }
           },
           speak: function(message) {
             return this.perform('speak', {
               message: message
             });
           },
           refresh: function(message) {
             return this.perform('refresh', {
               message: message
             });
           }
         });
         this.setAllPersons();
         return {
           persons: []
         };
       },
       setAllPersons: function() {
         var self = this;
         axios.get('/people')
          .then(function (res) {
            self.setState({ persons: res.data });
          });
       },
       setNewPersons: function(newPerson) {
         var self = this;
         var params = new URLSearchParams();
         params.append('person[name]', newPerson);
         axios.post('/people', params)
          .then(function (res) {
            var persons = self.state.persons.concat(res.data);
            self.setState({ persons: persons });
          });
         App.room.refresh('');
       },
       render: function() {
         return (
           <div>
             {/*<Message />*/}
             <PersonInput onChange={this.setStateTextVal} onSave={this.setNewPersons} />
             <Person persons={this.state.persons} setAllPersons={this.setAllPersons} />
           </div>
         );
       }
     });
     var PersonInput = React.createClass({
       _onKeyDown: function (e) {
         if (e.keyCode === 13) {
           this.props.onSave(e.target.value);
           e.target.value = "";
         }
       },
       render: function() {
         return (
           <div>
             <span>参加者を追加する</span>
             <input className="personInput" type="text" onChange={this._onChange} onKeyDown={this._onKeyDown} />
          </div>
         )
       }
     });
     var Person = React.createClass({
       _setAllPersons: function(){
         this.props.setAllPersons();
       },
       render: function() {
         var self = this;
         var persons = this.props.persons.map(function (person) {
           return (
             <div key={person.id} className="person">
              <PersonWow person={person} setAllPersons={self._setAllPersons}/>
              <PersonDelete person={person} setAllPersons={self._setAllPersons}/>
              <p className="personWow"><span className="count">{person.wow}</span>へぇ</p>
              <div className="personName"><span>{person.name}</span></div>
             </div>
           );
         });
         return (
           <div>
             {persons}
           </div>
         );
       }
     });
     var PersonWow = React.createClass({
       setAllPersons: function(){
         this.props.setAllPersons();
       },
       personWow: function (e) {
         var self = this;
         new Audio("audio/wow.mp3").play();
         App.room.refresh('wow');
         axios.get('/increment_wow/' + this.props.person.id)
          .then(function (res) {
            self.setAllPersons();
          });
          event.target.value = '';
          event.preventDefault();

          $('button').prop('disabled', true);
          setTimeout(function(){
            $('button').prop('disabled', false);
          }, 500);
       },
       render: function() {
         return (
           <button className="personWowBtn" onClick={this.personWow}>へぇ</button>
         );
       }
     });
     var PersonDelete = React.createClass({
       setAllPersons: function(){
         this.props.setAllPersons();
       },
       deletePerson: function (e) {
         var self = this;
         axios.delete('/people/' + this.props.person.id)
          .then(function (res) {
            self.setAllPersons();
          });
          App.room.refresh('');
       },
       render: function() {
         return (
           <span className="personDelete" onClick={this.deletePerson}>×</span>
         );
       }
     });
    //  var Message = React.createClass({
    //    getInitialState: function () {
    //      $(document).on('keypress', '[data-behavior~=room_speaker]', function(event) {
    //        if (event.keyCode === 13) {
    //          App.room.speak(event.target.value);
    //          event.target.value = '';
    //          return event.preventDefault();
    //        }
    //      });
    //      return {
    //        messages: []
    //      };
    //    },
    //    render: function() {
    //      var messages = this.state.messages.map(function (message) {
    //        return (
    //            <p>{message}</p>
    //        );
    //      });
    //      return (
    //        <div>
    //          <div id="messages">
    //            {messages}
    //          </div>
    //          <input data-behavior="room_speaker"/>
    //        </div>
    //      )
    //    }
    //  });
      var m = ReactDOM.render(<Root />, document.getElementById('app'));
    </script>
  </body>
</html>
