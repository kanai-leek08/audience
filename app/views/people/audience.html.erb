<!DOCTYPE html>
<html>
  <head>
    <script src="js/react.js"></script>
    <script src="js/JSX.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <style>
      .person{
        width: 30%;
        display: inline-block;
        background: #4CAF50;
        text-align: center;
        margin: 10px;
      }
    </style>
  </head>
  <body>
    <div id="app"></div>
    <script type="text/jsx">
     var Root = React.createClass({
       getInitialState: function () {
         this.setAllPersons();
         return {
           persons: []
         };
       },
       setAllPersons: function() {
         var self = this;
         axios.get('/people')
          .then(function (res) {
            self.setState({ persons: res.data });
          });
       },
       setNewPersons: function(newPerson) {
         var self = this;
         var params = new URLSearchParams();
         params.append('person[name]', newPerson);
         axios.post('/people', params)
          .then(function (res) {
            var persons = self.state.persons.concat(res.data);
            self.setState({ persons: persons });
          });
       },
       render: function() {
         return (
           <div>
             <Message />
             <PersonInput onChange={this.setStateTextVal} onSave={this.setNewPersons} />
             <Person persons={this.state.persons} setAllPersons={this.setAllPersons} />
           </div>
         );
       }
     });
     var Message = React.createClass({
       getInitialState: function () {
         return {
           messages: ['hoge', 'fuga']
         };
       },
       render: function() {
         var messages = this.state.messages.map(function (message) {
           return (
             <div>
               <p>{message}</p>
             </div>
           );
         });
         return <div>{messages}</div>
       }
     });
     var PersonInput = React.createClass({
       _onKeyDown: function (e) {
         if (e.keyCode === 13) {
           this.props.onSave(e.target.value);
           e.target.value = "";
         }
       },
       render: function() {
         return (
           <div>
             <p>参加者を追加する</p>
             <input type="text" onChange={this._onChange} onKeyDown={this._onKeyDown} />
          </div>
         )
       }
     });
     var Person = React.createClass({
       _setAllPersons: function(){
         this.props.setAllPersons();
       },
       render: function() {
         var self = this;
         var persons = this.props.persons.map(function (person) {
           return (
             <div className="person">
              <p>{person.name}</p>
              <p>{person.wow}へぇ</p>
              <PersonWow person={person} setAllPersons={self._setAllPersons}/>
              <PersonDelete person={person} setAllPersons={self._setAllPersons}/>
             </div>
           );
         });
         return (
           <div>
             {persons}
           </div>
         );
       }
     });
     var PersonWow = React.createClass({
       setAllPersons: function(){
         this.props.setAllPersons();
       },
       _onClick: function (e) {
         var self = this;
         new Audio("audio/wow.mp3").play();
         axios.get('/increment_wow/' + this.props.person.id)
          .then(function (res) {
            self.setAllPersons();
          });
       },
       render: function() {
         return (
           <button onClick={this._onClick}>へぇボタン</button>
         );
       }
     });
     var PersonDelete = React.createClass({
       setAllPersons: function(){
         this.props.setAllPersons();
       },
       _onClick: function (e) {
         var self = this;
         axios.delete('/people/' + this.props.person.id)
          .then(function (res) {
            self.setAllPersons();
          });
       },
       render: function() {
         return (
           <button onClick={this._onClick}>X ユーザ削除</button>
         );
       }
     });
     var m = React.render(<Root />, document.getElementById('app'));
    </script>

  <script>
     App.room = App.cable.subscriptions.create("RoomChannel", {
        connected: function() {},
        disconnected: function() {},
        received: function(data) {},
        speak: function() {
          return this.perform('speak');
        }
      });
    </script>
  </body>
</html>
